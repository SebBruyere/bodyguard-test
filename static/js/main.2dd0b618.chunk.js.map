{"version":3,"sources":["Components/logo.svg","Common/ApiService.js","Components/Callback/Callback.js","Components/Layouts/Header.js","Components/App.js","serviceWorker.js","index.js"],"names":["module","exports","ApiService","this","credentials","require","twitchCredentials","baseUrl","clientId","redirectUriCallback","responseType","code","clientSecret","redirectUriToken","apiService","hash","window","location","search","substring","split","reduce","initial","item","parts","decodeURIComponent","Callback","tokenUrl","getTwitchToken","axios","post","then","response","console","log","data","access_token","localStorage","setItem","redirect","catch","error","React","Component","props","AppBar","position","Toolbar","Typography","variant","color","styles","margins","marginTop","marginBottom","state","isLogged","token","getItem","setState","path","component","Header","Container","maxWidth","Grid","container","xs","justify","alignItems","Button","href","getTwitchLoginLink","style","onClick","handleClick","src","logo","className","alt","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,kC,4jBCEtBC,E,WACjB,aAAgB,oBACZC,KAAKC,YAAcC,EAAQ,I,iEAI3B,MAAQ,UAAGF,KAAKC,YAAYE,kBAAkBC,QAAtC,kCACaJ,KAAKC,YAAYE,kBAAkBE,UADhD,wBAEiBL,KAAKC,YAAYE,kBAAkBG,qBAFpD,yBAGkBN,KAAKC,YAAYE,kBAAkBI,gB,qCAGjDC,GACZ,MAAO,UAAGR,KAAKC,YAAYE,kBAAkBC,QAAtC,8BACMJ,KAAKC,YAAYE,kBAAkBE,UADzC,yBAEWL,KAAKC,YAAYE,kBAAkBM,cAF9C,gBAGED,GAHF,yDAKUR,KAAKC,YAAYE,kBAAkBO,sB,KChBtDC,EAAa,IAAIZ,EAEjBa,EAAOC,OAAOC,SAASC,OAC1BC,UAAU,GACVC,MAAM,KACNC,QAAO,SAASC,EAASC,GACxB,GAAIA,EAAM,CACR,IAAIC,EAAQD,EAAKH,MAAM,KACvBE,EAAQE,EAAM,IAAMC,mBAAmBD,EAAM,IAE/C,OAAOF,IACN,IAGgBI,E,kLAGb,IAAIC,EAAWb,EAAWc,eAAeb,EAAKJ,MAE9CkB,IAAMC,KAAMH,GACXI,MAAK,SAAUC,GACZC,QAAQC,IAAIF,GACRA,EAASG,KAAKC,cACdpB,OAAOqB,aAAaC,QAAQ,QAASN,EAASG,KAAKC,cACnDpB,OAAOC,SAAW,KACe,UAA1Be,EAASG,KAAKI,WACrBvB,OAAOC,SAAW,aAGzBuB,OAAM,SAASC,GACZzB,OAAOC,SAAW,c,+BAKtB,OACI,6BACKgB,QAAQC,IAAIpB,EAAWc,eAAeb,EAAKJ,Y,GAvBtB+B,IAAMC,W,iECZ7B,WAAAC,GAAK,OAChB,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,WAA/B,gB,yBCENC,EAAS,CACXC,QAAS,CACLC,UAAW,GACXC,aAAc,GACdJ,MAAO,UAITpC,EAAa,IAAIZ,E,oDAInB,aAAgB,IAAD,8BACX,gBACKqD,MAAQ,CACTC,UAAU,EACVC,MAAO,IAJA,E,gEASPzC,OAAOqB,aAAaqB,QAAQ,UAC5BvD,KAAKwD,SAAS,CACV,MAAS3C,OAAOqB,aAAaqB,QAAQ,a,+BAO7C,OACI,kBAAC,WAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOE,KAAK,YAAYC,UAAWnC,KAEvC,kBAACoC,EAAD,MACA,kBAACC,EAAA,EAAD,CAAWC,SAAS,MAChB,kBAACC,EAAA,EAAD,CACIC,WAAS,EACT3C,MAAI,EACJ4C,GAAI,GACJC,QAAQ,SACRC,WAAW,WAETlE,KAAKoD,MAAME,OACT,kBAACa,EAAA,EAAD,CAAQC,KAAMzD,EAAW0D,qBAAsBvB,QAAQ,YAAYC,MAAM,UAAUuB,MAAOtB,EAAOC,QAASsB,QAASvE,KAAKyC,MAAM+B,aAA9H,qBAIHxE,KAAKoD,MAAME,OACR,0BAAMgB,MAAOtB,EAAOC,SAAUjD,KAAKoD,MAAME,OAE7C,yBAAKmB,IAAKC,IAAMC,UAAU,WAAWC,IAAI,gB,GA1CpCpC,aCTTqC,QACW,cAA7BhE,OAAOC,SAASgE,UAEe,UAA7BjE,OAAOC,SAASgE,UAEhBjE,OAAOC,SAASgE,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3D,MAAK,SAAA4D,GACJA,EAAaC,gBAEdpD,OAAM,SAAAC,GACLR,QAAQQ,MAAMA,EAAMoD,c","file":"static/js/main.2dd0b618.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","\r\n\r\nexport default class ApiService {\r\n    constructor () {\r\n        this.credentials = require('./twitchAppConf.json');\r\n    }\r\n\r\n    getTwitchLoginLink () {\r\n        return  `${this.credentials.twitchCredentials.baseUrl}authorize?` +\r\n                `client_id=${this.credentials.twitchCredentials.clientId}` +\r\n                `&redirect_uri=${this.credentials.twitchCredentials.redirectUriCallback}` +\r\n                `&response_type=${this.credentials.twitchCredentials.responseType}`;\r\n    }\r\n\r\n    getTwitchToken (code) {\r\n        return `${this.credentials.twitchCredentials.baseUrl}token?` +\r\n        `client_id=${this.credentials.twitchCredentials.clientId}` +\r\n        `&client_secret=${this.credentials.twitchCredentials.clientSecret}` +\r\n        `&code=${code}` +\r\n        `&grant_type=authorization_code` +\r\n        `&redirect_uri=${this.credentials.twitchCredentials.redirectUriToken}`;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport ApiService from '../../Common/ApiService';\r\n\r\nconst apiService = new ApiService ();\r\n\r\nconst hash = window.location.search\r\n  .substring(1)\r\n  .split(\"&\")\r\n  .reduce(function(initial, item) {\r\n    if (item) {\r\n      var parts = item.split(\"=\");\r\n      initial[parts[0]] = decodeURIComponent(parts[1]);\r\n    }\r\n    return initial;\r\n  }, {});\r\n\r\n\r\nexport default class Callback extends React.Component {\r\n\r\n    componentDidMount() {\r\n        var tokenUrl = apiService.getTwitchToken(hash.code);\r\n\r\n        axios.post( tokenUrl )\r\n        .then(function (response) {\r\n            console.log(response);\r\n            if (response.data.access_token) {\r\n                window.localStorage.setItem(\"token\", response.data.access_token);\r\n                window.location = \"/\";\r\n            } else if (response.data.redirect == '/login'){\r\n                window.location = \"/login\"\r\n            }\r\n        })\r\n        .catch(function(error) {\r\n            window.location = \"/login\"\r\n        })\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div>\r\n                {console.log(apiService.getTwitchToken(hash.code))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport default props =>\r\n    <AppBar position=\"static\">\r\n        <Toolbar>\r\n            <Typography variant=\"h4\" color=\"inherit\">\r\n                Bodyguard\r\n            </Typography>\r\n        </Toolbar>\r\n    </AppBar>\r\n","import React, {Component, Fragment} from 'react';\r\nimport {Callback} from './Callback';\r\nimport { BrowserRouter, Route, Link } from \"react-router-dom\";\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport {Header} from './Layouts';\r\nimport ApiService from '../Common/ApiService';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst styles = {\r\n    margins: {\r\n        marginTop: 50,\r\n        marginBottom: 50,\r\n        color: \"white\"\r\n    }\r\n}\r\n\r\nconst apiService = new ApiService();\r\n\r\nexport default class extends Component {\r\n\r\n    constructor () {\r\n        super();\r\n        this.state = {\r\n            isLogged: false,\r\n            token: \"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount () {\r\n        if (window.localStorage.getItem(\"token\")) {\r\n            this.setState({\r\n                \"token\": window.localStorage.getItem(\"token\")\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <BrowserRouter>\r\n                    <Route path=\"/callback\" component={Callback}/>\r\n                </BrowserRouter>\r\n                <Header />\r\n                <Container maxWidth=\"sm\">\r\n                    <Grid\r\n                        container\r\n                        item\r\n                        xs={12}\r\n                        justify=\"center\"\r\n                        alignItems=\"center\"\r\n                    >\r\n                        {!this.state.token && (\r\n                            <Button href={apiService.getTwitchLoginLink()} variant=\"contained\" color=\"primary\" style={styles.margins} onClick={this.props.handleClick}>\r\n                                Connect to Twitch\r\n                            </Button>\r\n                        )}\r\n                        {this.state.token && (\r\n                            <span style={styles.margins}>{this.state.token}</span>\r\n                        )}\r\n                        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                    </Grid>\r\n                </Container>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}